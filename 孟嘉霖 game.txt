#include <stdlib.h>
#include <stdio.h>
#include <conio.h>
#include <string.h>

#define MAXIMUS 15 //定义棋盘大小

int p[MAXIMUS][MAXIMUS];//存储对局信息
char buff[MAXIMUS*2+1][MAXIMUS*4+3];//输出缓冲器
int Cx,Cy;//当前光标位置  自己模拟光标
int Now;//当前走子的玩家，1代表黑，2代表白
int wl,wp;//当前写入缓冲器的列数和行数位置
char* showText;//在棋盘中央显示的文字信息
int count;//回合数


void menu()
{
	printf("\n");
	printf("               ★---您好，欢迎来到五子棋世界！---★\n\n"); 
	printf("           --------------------------------------------\n");
	printf("           ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈\n");
    printf("           && * -------- ☆  1.进入游戏 ☆-------- * &&\n"
		   "           && * -------- ☆  2.游戏说明 ☆-------- * &&\n"
	       "           && * -------- ☆  3.退出     ☆-------- * &&\n");
	printf("           ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈\n");
	printf("           --------------------------------------------\n\n");
	printf("请在1-3中选择以回车键结束：\n\n");
}
void menu2()
{
	
	system("cls");
	printf("\n\n\n");
	printf("       ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆\n");
	printf("       ☆                                          ☆\n");
    printf("       ☆              谢谢使用，再见！            ☆\n");
	printf("       ☆                                          ☆\n");
	printf("        ☆                                          ☆\n");
	printf("         ☆                            by XXXXXXXXX  ☆\n");
	printf("          ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆\n\n\n");
}
void menu3()
{

	printf("\n\n\n");
	printf("       ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆\n");
	printf("       ☆                                          ☆\n");
    printf("       ☆              1、再来一局                 ☆\n");
	printf("       ☆              2、退出                     ☆\n");
	printf("       ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆\n\n\n");
	
		
}
void Introduce()
{
	printf("\n");
	printf("                       ※  游戏说明 ※           \n\n");
	printf("  【游戏规则：】\n\n");
	printf("        → → → → → → → → → → → → → → → → \n");
	printf("      ↑ 五子棋专用棋盘为 15×15,盘面有纵横各十五条等 ↓\n");	
	printf("      ↑ 距离垂直交叉 的平行线构成,共225个交叉点 盘面 ↓\n");
	printf("      ↑ 正中一点为'天元 黑先、白后,从天元(h8)开始    ↓\n");
	printf("      ↑ 相互顺序落子。黑方的第一个棋子应下在天元上,  ↓\n");
	printf("      ↑ 白方第一个棋子只能下在与天元为中心邻近的八   ↓\n");
	printf("      ↑ 个点上,黑方第二个棋子只能下在与天元为中心邻  ↓\n");
	printf("      ↑ 近5×5点上,白棋第二个棋子不受限制,可下在棋盘 ↓\n");
	printf("      ↑ 任意位置 最先在棋盘横向 竖向 斜向形成连续的  ↓\n");
	printf("      ↑ 相同色五个棋子的一方为胜!                    ↓\n");
	printf("      ↑                                              ↓\n");
	printf("      ↑ 在游戏过程中，玩家可用上下左右键控制棋子，空 ↓\n");
	printf("      ↑ 格键落子。                                   ↓\n");
	printf("       ← ← ← ← ← ← ← ← ← ← ← ←  ← ← ← ← \n");
	printf("  【提示：】 \n\n");
	printf("         游戏过程中，可按Esc键退出！\n");
	getch();
}
char* Copy(char* strDest,const char* strSrc)//修改过的字符串复制函数，会忽略末端的\0
{
  char* strDestCopy = strDest;
  while (*strSrc!='\0')
  {
     *strDest++=*strSrc++;
  }
  return strDestCopy;
}
void Initialize()//初始化一个对局函数
{
  int i,j;//循环变量
  showText="";//重置显示信息
  count=0;//回合数归零
  for(i=0;i<MAXIMUS;i++)//重置对局数据
  {
     for(j=0;j<MAXIMUS;j++)
	 {
         p[i][j]=0;
	 }
  }
  Cx=Cy=MAXIMUS/2;//重置光标到中央
  Now=1;//重置当前为黑方
} 
char* getStyle(int i,int j)//获得棋盘中指定坐标交点位置的字符，通过制表符拼成棋盘
{
   if(p[i][j]==1)//1为黑子
     return "●";
   else if(p[i][j]==2)//2为白子
     return "○";
   else if(i==0&&j==0)//以下为边缘棋盘样式
     return "┏";
   else if(i==MAXIMUS-1&&j==0)
     return "┓";
   else if(i==MAXIMUS-1&&j==MAXIMUS-1)
     return "┛";
   else if(i==0&&j==MAXIMUS-1)
     return "┗";
   else if(i==0)
     return "┠";
   else if(i==MAXIMUS-1)
     return "┨";
   else if(j==0)
     return "┯";
   else if(j==MAXIMUS-1)
     return "┷";
   return "┼";//中间的空位
}
char* getCurse(int i,int j)
{
	//获得指定坐标交点位置左上格的样式，通过制表符来模拟光标的显示
    if(i==Cx)
	{
       if(j==Cy)
          return "┏";
       else if (j==Cy+1)
          return "┗";
	}
    else if(i==Cx+1)
	{
       if(j==Cy)
          return "┓";
       else if (j==Cy+1)
          return "┛";
	}
    return "　";//如果不在光标附近则为空
}
void write(char* c)//向缓冲器写入字符串
{
	Copy(buff[wl]+wp,c);
    wp+=strlen(c);
}
void ln()//缓冲器写入位置提行
{
	wl+=1;
    wp=0;
}
void Display()//将缓冲器内容输出到屏幕
{
	int i,l=strlen(showText);//循环变量，中间文字信息的长度
    int Offset=MAXIMUS*2+2-l/2;//算出中间文字信息居中显示所在的横坐标位置
    if(Offset%2==1)//如果位置为奇数，则移动到偶数，避免混乱
	{
        Offset--;
	}
    Copy(buff[MAXIMUS]+Offset,showText);//讲中间文字信息复制到缓冲器
    if(l%2==1)//如果中间文字长度为半角奇数，则补上空格，避免混乱
	{
        *(buff[MAXIMUS]+Offset+l)=0x20;
	}
    system("cls");//清理屏幕，准备写入
    for(i=0;i<MAXIMUS*2+1;i++){//循环写入每一行
        printf("%s",buff[i]);
    if(i<MAXIMUS*2)//写入完每一行需要换行
        printf("\n");
	}
}
void Print()//将整个棋盘算出并储存到缓冲器，然后调用Display函数显示出来
{
	int i,j;//循环变量
    wl=0;
    wp=0;
    for(j=0;j<=MAXIMUS;j++)//写入出交点左上角的字符，因为需要打印棋盘右下角，所以很以横纵各多一次循环
	{
        for(i=0;i<=MAXIMUS;i++)
		{
              write(getCurse(i,j));//写入左上角字符
              if(j==0||j==MAXIMUS)//如果是棋上下盘边缘则没有连接的竖线，用空格填充位置
			  {
                   if(i!=MAXIMUS)
                       write("　");
			  }
              else//如果在棋盘中间则用竖线承接上下
			  {
                   if(i==0||i==MAXIMUS-1)//左右边缘的竖线更粗
                       write("┃");
                   else if(i!=MAXIMUS)//中间的竖线
                       write("│");
			  }
		}
        if(j==MAXIMUS)//如果是最后一次循环，则只需要处理边侧字符，交点要少一排
		{
             break;
		}
        ln();//提行开始打印交点内容
		write("　");//用空位补齐位置
        for(i=0;i<MAXIMUS;i++)//按横坐标循环正常的次数
		{
             write(getStyle(i,j));//写入交点字符
             if(i!=MAXIMUS-1)//如果不在最右侧则补充一个横线承接左右
			 {
                  if(j==0||j==MAXIMUS-1)
				  {
                        write("━");//上下边缘的横线更粗
				  }
                  else
				  {
                        write("―");//中间的横线
				  }
			 }
		 }
         ln();//写完一行后提行
	}
    Display();//将缓冲器内容输出到屏幕
}
int Put()
{
	//在当前光标位置走子，如果非空，则返回0表示失败
	if(p[Cx][Cy]==0)
	{
         p[Cx][Cy]=Now;//改变该位置数据
         return 1;//返回1表示成功
	}
    else
	{
        return 0;
	}
}
int Check()//胜负检查，即判断当前走子位置有没有造成五连珠的情况
{
	int w=1,x=1,y=1,z=1,i;//累计横竖正斜反邪四个方向的连续相同棋子数目
    for(i=1;i<5;i++)
		if(Cy+i<MAXIMUS&&p[Cx][Cy+i]==Now)
			w++;
		else break;//向下检查
    for(i=1;i<5;i++)
		if(Cy-i>0&&p[Cx][Cy-i]==Now)
		w++;
		else break;//向上检查
    if(w>=5)
		return Now;//若果达到5个则判断当前走子玩家为赢家
    for(i=1;i<5;i++)
		if(Cx+i<MAXIMUS&&p[Cx+i][Cy]==Now)
			x++;
		else break;//向右检查
    for(i=1;i<5;i++)
		if(Cx-i>0&&p[Cx-i][Cy]==Now)
			x++;
		else break;//向左检查
    if(x>=5)
		return Now;//若果达到5个则判断当前走子玩家为赢家
    for(i=1;i<5;i++)
		if(Cx+i<MAXIMUS&&Cy+i<MAXIMUS&&p[Cx+i][Cy+i]==Now)
			y++;
		else break;//向右下检查
    for(i=1;i<5;i++)
		if(Cx-i>0&&Cy-i>0&&p[Cx-i][Cy-i]==Now)
			y++;
		else break;//向左上检查
    if(y>=5)
		return Now;//若果达到5个则判断当前走子玩家为赢家
    for(i=1;i<5;i++)
		if(Cx+i<MAXIMUS&&Cy-i>0&&p[Cx+i][Cy-i]==Now)
			z++;
		else break;//向右上检查
    for(i=1;i<5;i++)
		if(Cx-i>0&&Cy+i<MAXIMUS&&p[Cx-i][Cy+i]==Now)
			z++;
		else break;//向左下检查
    if(z>=5)
		return Now;//若果达到5个则判断当前走子玩家为赢家
    return 0;//若没有检查到五连珠，则返回0表示还没有玩家达成胜利
}
int RunGame()//进行整个对局，返回赢家信息
{
	int input;//输入变量
    int victor;
    Initialize();
    while(1)
	{
    Print();
    input=getch();
    if(input==27)
	{
		menu2();
		getch();
        exit(0);
	}
    else if(input==0x20)
	{
        if(Put())
		{
             victor=Check();
             Now=3-Now;
             count++;
             if(victor==1)	 {
                   showText="黑方获得了胜利！";
                   Print(); 
                   if(getch()==0xE0)
				   {
                       getch();
				   }
                   return Now;
			 }
             else if(victor==2)

			 {
                   showText="白方获得了胜利！";
                   Display();
                   if(getch()==0xE0)
				   {
                       getch();
				   }
                   return Now;
			 }
			 else if(count==MAXIMUS*MAXIMUS)
			 {
                   showText="平局！";
                   Display();
                   if(getch()==0xE0)
				   {
                        getch();
				   }
                   return 0;
			 }
		}
	}
    else if(input==0xE0)
	{
         input=getch();
         switch(input)
		 {
              case 0x4B:
                   Cx--;
                   break;
              case 0x48:
                   Cy--;
                   break;
              case 0x4D:
                   Cx++;
                   break;
              case 0x50:
                   Cy++;
                   break;
		 }
         if(Cx<0)
			 Cx=MAXIMUS-1;
         if(Cy<0)
			 Cy=MAXIMUS-1;
         if(Cx>MAXIMUS-1)
			 Cx=0;
         if(Cy>MAXIMUS-1)
			 Cy=0;
	}
	}
}
void main()//主函数
{
	char x;
	int a=0;
	system("title 简易五子棋 ――孟嘉霖制作");
    system("mode con cols=63 lines=32");
    system("color A1");
	printf("\n");
	do
	{
		a++;
		menu();
        printf("请输入您的选择：");
		if(a==1)
           scanf("%s",&x);
		else
			scanf("\n%s",&x);
		if(x!='1'&&x!='2'&&x!='3')
		{
			printf("输入错误!请重新输入!");
			getch();
			system("cls");
			
		}
		else
		{
		    switch(x)
			{
	            case '1':RunGame();
					system("cls");
	                break;
	            case '2':system("cls");
			         Introduce();
					 system("cls");
					 break;
			}
              

			    
		}
		
	}while(x!='3');
	menu2();
	

}  